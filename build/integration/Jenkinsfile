pipeline {
  agent any

  options {
    buildDiscarder(logRotator(numToKeepStr: '30', artifactNumToKeepStr: '5'))
    disableConcurrentBuilds()
  }

  triggers {
    cron '@midnight'
  }

  parameters {
    string(name: 'engineSource', defaultValue: 'https://product.ivyteam.io/', description: 'Engine page url')
    choice(name: 'browser', choices: ['', '*', 'chrome', 'firefox', 'webkit'], description: 'Browser used for integration tests (default: "*" on master/release, "chrome" on branch)')
  }

  stages {
    stage('Integration Test') {
      steps {
        script {
          docker.build('node-webtest', '-f build/Dockerfile.playwright .').inside {
            sh 'pnpm run update:axonivy:next'
            sh 'pnpm install --frozen-lockfile=false && pnpm run package'
            dir ('playwright/variables-test-project') {
              maven cmd: "-ntp clean verify -Dengine.page.url=${params.engineSource} -Dwebtest.cmd=webtest:${browser()}"
            }
          }
          archiveArtifacts artifacts: 'playwright/test-results/**', allowEmptyArchive: true
          archiveArtifacts artifacts: 'playwright/**/target/**/ivy.log', allowEmptyArchive: true
          withChecks('Integration WebTest') {
            junit testDataPublishers: [[$class: 'StabilityTestDataPublisher']], testResults: 'playwright/**/report.xml'
          }
        }
      }
    }
    stage('Protocol') {
      when {
        expression { isReleasingBranch() }
      }
      steps {
        script {
          catchError(buildResult: 'UNSTABLE', stageResult: 'UNSTABLE') {
            docker.build('node', '-f build/Dockerfile.node .').inside {
              def branchName = env.BRANCH_NAME.replace("/", "%252F")
              sh '''
                pnpm install --frozen-lockfile=false
                pnpm run clean

                artifacts="https://jenkins.ivyteam.io/job/core_json-schema/job/'''+branchName+'''/lastSuccessfulBuild/artifact"
                devSchema="${artifacts}/workspace/ch.ivyteam.ivy.variables.editor.lsp.schema/target/schema/variables/*/variables-tsgen.json/*zip*/schema.zip"
                curl -o schema.zip ${devSchema}
                unzip -j schema.zip
                mv $PWD/variables-tsgen.json $PWD/variables.json
                pnpm run generate $PWD/variables.json

                pnpm run build && pnpm run lint:ci
              '''
            }
          }
          withChecks('Integration Protocol ESLint') {
            recordIssues enabledForFailure: true, publishAllIssues: true, aggregatingResults: true, tools: [esLint(id: 'latest', pattern: 'packages/**/eslint.xml,integrations/**/eslint.xml')], qualityGates: [[threshold: 1, type: 'TOTAL', unstable: true]]
          }
        }
      }
    }
  }
}

def browser() {
  if (params.browser == '') {
    if (isReleasingBranch()) {
      return '*'
    }
    return 'chrome'
  }
  return params.browser;
}
